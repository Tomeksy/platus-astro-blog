---
interface Props {
  fallback?: string;
  className?: string;
}

const { 
  fallback = 'Es ist ein Fehler aufgetreten. Bitte versuchen Sie es sp√§ter erneut.',
  className = ''
} = Astro.props;
---

<div class={`error-boundary ${className}`}>
  <div class="bg-red-50 border border-red-200 rounded-lg p-4">
    <div class="flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-400 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
      </svg>
      <p class="text-red-800 text-sm">{fallback}</p>
    </div>
  </div>
</div>

<script>
  // Enhanced error handling for the client side
  window.addEventListener('error', (event) => {
    console.error('Global error caught:', event.error);
    
    // Show user-friendly error message
    const errorBoundaries = document.querySelectorAll('.error-boundary');
    if (errorBoundaries.length === 0) {
      // Create a temporary error message if no error boundary exists
      const errorDiv = document.createElement('div');
      errorDiv.className = 'fixed top-4 right-4 bg-red-50 border border-red-200 rounded-lg p-4 z-50';
      errorDiv.innerHTML = `
        <div class="flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-400 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
          </svg>
          <p class="text-red-800 text-sm">Es ist ein Fehler aufgetreten. Die Seite wird automatisch neu geladen.</p>
        </div>
      `;
      document.body.appendChild(errorDiv);
      
      // Auto-reload after 3 seconds
      setTimeout(() => {
        window.location.reload();
      }, 3000);
    }
  });

  // Handle unhandled promise rejections
  window.addEventListener('unhandledrejection', (event) => {
    console.error('Unhandled promise rejection:', event.reason);
    event.preventDefault(); // Prevent the default browser behavior
  });
</script>